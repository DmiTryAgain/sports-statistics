package tg

import (
	"context"
	"fmt"
	"regexp"
	"strconv"
	"strings"
	"text/tabwriter"
	"text/template"
	"time"

	"github.com/DmiTryAgain/sports-statistics/pkg/db"

	"github.com/go-pg/pg/v10"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/vmkteam/embedlog"
)

type MessageHandler struct {
	embedlog.Logger

	dbc      *pg.DB
	statRepo db.StatisticRepo
	tgBot    *tgbotapi.BotAPI
	cfg      Bot

	commonHelpMsg string
	addHelpMsg    string
	showHelpMsg   string
	helpHelpMsg   string
	errMsg        string
}

func New(logger embedlog.Logger, dbc *pg.DB, tgBot *tgbotapi.BotAPI, cfg Bot) *MessageHandler {
	h := &MessageHandler{
		Logger:   logger,
		dbc:      dbc,
		cfg:      cfg,
		tgBot:    tgBot,
		statRepo: db.NewStatisticRepo(dbc),
	}

	h.initMessages()

	return h
}

func (m *MessageHandler) initMessages() {
	m.commonHelpMsg = fmt.Sprintf(
		"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–≤–æ–∏—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π."+
			"–¢—ã –∂–µ –≤–µ–¥—å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Å–ø–æ—Ä—Ç–æ–º, –≤–µ—Ä–Ω–æ?ü§î\n"+
			"–ü–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í –≥—Ä—É–ø–ø–∞—Ö –æ–±—Ä–∞—â–∞–π—Å—è –∫–æ –º–Ω–µ –≤–æ—Ç —Ç–∞–∫: `@%s`"+
			"–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥: \n"+
			"–ù–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: `–°–¥–µ–ª–∞–ª` –∏–ª–∏ `–î–æ–±–∞–≤—å` \n"+
			"–ù–∞ –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: `–ü–æ–∫–∞–∂–∏` \n"+
			"–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–º–º–∞–Ω–¥–µ, –æ—Ç–ø—Ä–∞–≤—å: `–ø–æ–º–æ—â—å` *–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã*\n"+
			"–ù–∞–ø—Ä–∏–º–µ—Ä: `–ü–æ–º–æ—â—å –î–æ–±–∞–≤—å`",
		m.cfg.Name,
	)

	m.addHelpMsg = fmt.Sprintf(
		"–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (`—Å–¥–µ–ª–∞–ª`). –ó–∞—Ç–µ–º, —á–µ—Ä–µ–∑ "+
			"–ø—Ä–æ–±–µ–ª —É–∫–∞–∂–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–¥–µ–ª–∞–ª. –î–∞–ª–µ–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —É–∫–∞–∂–∏ —Å–¥–µ–ª–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ \n"+
			"–ù–∞–ø—Ä–∏–º–µ—Ä, —Ç—ã —Å–¥–µ–ª–∞–ª –ø–æ–¥—Ö–æ–¥ –∏–∑ 10 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π. –ß—Ç–æ–±—ã —è –≤—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–∏—Å–∞–ª, –Ω–∞–ø–∏—à–∏ –º–Ω–µ "+
			"`@%s —Å–¥–µ–ª–∞–ª –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ 10`\n"+
			"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: `%s`",
		m.cfg.Name,
		exercises().String(),
	)

	m.showHelpMsg =
		"–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É `–ü–æ–∫–∞–∂–∏`. –ó–∞—Ç–µ–º —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è." +
			"*–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é*, –Ω–∞–ø—Ä–∏–º–µ—Ä, `–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ, –æ—Ç–∂–∏–º–∞–Ω–∏–µ`.\n" +
			"–î–∞–ª–µ–µ —É–∫–∞–∂–∏ –ø–µ—Ä–∏–æ–¥, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–µ—Ä–∏–æ–¥ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ " +
			"—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥—É–µ—Ç –ø—Ä–µ–¥–ª–æ–≥ *–∑–∞*. –ü–µ—Ä–∏–æ–¥–æ–≤ –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å " +
			"–Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω—É–∂–Ω–æ —Ç–∞–∫ –∂–µ –Ω—É–∂–µ–Ω –ø—Ä–µ–¥–ª–æ–≥ *–∑–∞*.\n" +
			"–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞ 15.10.2022, " +
			"–∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 01.10.2022 –ø–æ 10.10.2022. –ß—Ç–æ–±—ã –ø–µ—Ä–∏–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤–≤–µ–¥–∏ –ø–µ—Ä–∏–æ–¥—ã" +
			"—Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n" +
			"`–∑–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞ 15.10.2022, –∑–∞ 01.10.2022-10.10.2022`\n" +
			"–ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –±–µ–∑ —É—á—ë—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ï—Å–ª–∏ –ø—Ä–∏ " +
			"–≤–≤–æ–¥–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–∞—Ç–∞ *–æ—Ç* –æ–∫–∞–∂–µ—Ç—Å—è –±–æ–ª—å—à–µ –¥–∞—Ç—ã *–¥–æ*, –æ–Ω–∏ –ø–æ–º–µ–Ω—è—é—Ç—Å—è –º–µ—Å—Ç–∞–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ —ç—Ç–æ—Ç " +
			"–ø–µ—Ä–∏–æ–¥ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n" +
			"–í –∏—Ç–æ–≥–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: \n" +
			"`@%s –ø–æ–∫–∞–∂–∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ, –æ—Ç–∂–∏–º–∞–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞ 15.10.2022, –∑–∞ 01.10.2022-10.10.2022`\n" +
			"–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: " //TODO

	m.helpHelpMsg = "–ü–æ–º–æ—â—å –∫ –∫–æ–º–∞–Ω–¥–µ –ø–æ–º–æ—â–∏ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞. –ù–∞–¥–æ –∂ –±—ã–ª–æ –¥–æ–¥—É–º–∞—Ç—å—Å—è –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å –∫–æ–º–∞–Ω–¥–µ –ø–æ–º–æ—â–∏ü§î"

	m.errMsg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
}

func (m *MessageHandler) ListenAndHandle(ctx context.Context) {
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = int(m.cfg.Timeout.Duration.Seconds())

	// Get updates chan to listen to them
	updates := m.tgBot.GetUpdatesChan(updateConfig)

	// Listen messages
	for update := range updates {
		if update.Message == nil {
			continue
		}

		text, err := m.Handle(ctx, update)
		if err != nil {
			text = m.errMsg // TODO: handle better
			m.Error(ctx, err.Error())
		} else if text == "" {
			continue
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
		msg.ReplyToMessageID = update.Message.MessageID

		if _, err := m.tgBot.Send(msg); err != nil {
			// TODO: make retries
			m.Errorf("failed to send message: %v", err)
		}
	}
}

func (m *MessageHandler) Handle(ctx context.Context, upd tgbotapi.Update) (string, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–∑–∞–ª–∏—Å—å –≤–æ–æ–±—â–µ –∫ –Ω–∞–º
	hasMention := m.hasBotMention(upd.Message.Text)
	if !hasMention && upd.FromChat().IsGroup() {
		return "", nil // –°–∫–∏–ø–∞–µ–º, –µ—Å–ª–∏ –∫ –Ω–∞–º –Ω–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å –∏–ª–∏ –Ω–µ –ø–∏—Å–∞–ª–∏ –Ω–∞–º –≤ –ª–∏—á–∫—É
	}

	msgText := m.clearRawMsg(upd.Message.Text)
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
	if msgText == "" {
		return "–ß—ë?", nil
	}

	userID := strconv.FormatInt(upd.Message.From.ID, 10)

	switch remainedText, c := m.evaluateCmd(msgText); c {
	case addCmd:
		return m.handleAdd(ctx, remainedText, userID)
	case showCmd:
		return m.handleShow(ctx, remainedText, userID)
	case helpCmd:
		return m.handleHelp(remainedText)
	default:
		return "–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥—ë–Ω—É—é –í–∞–º–∏ –∫–æ–º–∞–Ω–¥—É", nil
	}
}

// hasBotMention –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –±–æ—Ç –∑–∞–º–µ–Ω—à–µ–Ω–µ–Ω
func (m *MessageHandler) hasBotMention(msgTxt string) bool {
	return strings.Contains(msgTxt, "@"+strings.ToLower(m.cfg.Name))
}

// clearRawMsg –£–±–∏—Ä–∞–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤—ã–∑–æ–≤ –±–æ—Ç–∞, —Å–∏–º–≤–æ–ª—ã –ø—É–Ω–∫—É—Ç–∞—Ü–∏–∏, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
func (m *MessageHandler) clearRawMsg(rawMsg string) string {
	// –£–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞
	withoutMention := strings.ReplaceAll(rawMsg, "@"+strings.ToLower(m.cfg.Name), "")

	// –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç—Å—Ç—É–ø—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
	reSpaces := regexp.MustCompile(`\s+`)
	withoutSpaces := reSpaces.ReplaceAllString(withoutMention, " ")

	const dashPlaceHolder = "DASHPLACEHOLDER"
	// –î–µ–ª–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Å —Ç–∏—Ä–µ, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ —Ç–∏—Ä–µ
	reHyphen := regexp.MustCompile(`(\d)\s*-\s*(\d)`)
	withPlacehoder := reHyphen.ReplaceAllString(withoutSpaces, fmt.Sprintf("${1}%s${2}", dashPlaceHolder))

	// –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
	rePunct := regexp.MustCompile(`[[:punct:]]`)
	withoutPuncts := rePunct.ReplaceAllString(withPlacehoder, "")

	// –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏—Ä–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –º–µ—Å—Ç–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
	withDashes := strings.ReplaceAll(withoutPuncts, dashPlaceHolder, "-")

	// –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
	return strings.TrimSpace(withDashes)
}

// evaluateCmd –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç, –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥–∞, —Å—Ç—Ä–æ–∫—É –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏ —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
func (m *MessageHandler) evaluateCmd(rawMsg string) (cleaned string, cmd cmd) {
	// –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∑–∞ –∫–æ–º–∞–Ω–¥–∞
	words := strings.SplitN(rawMsg, " ", 2)
	if len(words) == 0 {
		return rawMsg, unknownCmd
	}

	if len(words) > 1 {
		cleaned = words[1]
	}

	return cleaned, cmdByWord[strings.ToLower(words[0])]
}

func (m *MessageHandler) handleAdd(ctx context.Context, rawMsg string, tgUserID string) (string, error) {
	if rawMsg == "" {
		return "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ", nil
	}

	words := strings.Split(rawMsg, " ")
	ex, ok := exerciseByWord[words[0]]
	if !ok {
		return fmt.Sprintf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: %s", words[0]), nil
	}

	// –ï—Å–ª–∏ –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω
	if ex.mustHaveCnt() {
		if len(words) <= 1 {
			return fmt.Sprintf("–î–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è `%s` –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", words[0]), nil
		}

		cnt, err := strconv.ParseFloat(words[1], 64)
		if err != nil {
			return fmt.Sprintf("–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: %s", words[1]), nil //nolint:nilerr
		} else if cnt < 1 {
			return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –∏ –±–æ–ª–µ–µ", nil
		}

		_, err = m.statRepo.AddStatistic(ctx, &db.Statistic{
			TgUserID: tgUserID,
			Exercise: ex.String(),
			Count:    cnt,
			Params:   nil,
			StatusID: 1,
		})
		if err != nil {
			return "", err
		}
	}

	return "–î–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ", nil
}

func (m *MessageHandler) handleShow(ctx context.Context, rawMsg string, tgUserID string) (res string, err error) {
	if rawMsg == "" {
		return "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ", nil
	}

	// –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–ª–æ–≥
	rawMsg = strings.ReplaceAll(rawMsg, "–∑–∞", "")
	// –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
	words := strings.Split(rawMsg, " ")

	var (
		exrs Exercises // –°—é–¥–∞ –∑–∞–ø–∏—à–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞–Ω—É—Ç—å
		i    int       // –ó–¥–µ—Å—å –∑–∞–ø–æ–º–Ω–∏–º, –Ω–∞ –∫–∞–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –≤—ã–π–¥–µ–º –∏–∑ —Ü–∏–∫–ª–∞
	)

	// –ò–¥—ë–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–ª–æ–≤—É –∏ –∏—â–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –¥–æ—Å—Ç–∞—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ñ–µ–π–ª–∞
	for i = range words {
		if textContainsAllExerciseWords(words[i]) {
			i++ // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ —Å–ª–æ–≤–æ, —Ñ–∏–ª—å—Ç—Ä –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç –≤—ã—Ç–∞—â–∏–º –∏ —Ç–∞–∫ –≤—Å—ë
			break
		}

		ex, ok := exerciseByWord[words[i]]
		if !ok { // –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –º—ã –Ω–∞–≤–µ—Ä–Ω–æ–µ –¥–æ—à–ª–∏ –¥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è
			break
		}

		exrs = append(exrs, ex)
	}

	var (
		periodsFilter periods
		invText       string
	)

	// –°–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∫—É—Å–æ–∫ —Ñ—Ä–∞–∑—ã –ø—Ä–æ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ.
	// –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥.
	// –ï—Å–ª–∏ –¥–∞, –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, —Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.
	if len(words[i:]) > 0 {
		// –°–ª–µ–ø–∏–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∫—É –ø–æ–¥ –ø–µ—Ä–∏–æ–¥
		periodLeftPart := strings.Join(words[i:], " ")
		// –ï—Å–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç —Å–ø–µ—Ü —Ñ—Ä–∞–∑—ã –¥–ª—è –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
		if !textContainsAllPeriodWords(periodLeftPart) {
			var invPeriods []string
			// –¢–æ –∏–¥—ë–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–µ–Ω—Ç
			periodsFilter, invPeriods = m.prepareCorrectAndInvalidPeriods(words[i:])
			invText = strings.Join(invPeriods, ", ")
		}
	}

	// –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
	if invText != "" {
		res += fmt.Sprintf("–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: %s\n", invText)
	}

	// –¢–µ–ø–µ—Ä—å –∏–¥—ë–º –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
	s := db.GroupedStatisticSearch{
		StatisticSearch: db.StatisticSearch{
			TgUserID:  &tgUserID,
			Exercises: exrs.StringSlice(),
		},
		Periods: periodsFilter.ToDB(),
	}
	stats, err := m.statRepo.GroupedStatisticByFilters(ctx, s)
	if err != nil {
		return "", fmt.Errorf("fetch statistic, err=%w", err)
	}

	// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º
	if len(stats) == 0 {
		return res + "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢", nil
	}

	table, err := m.buildTableByStat(stats)
	if err != nil {
		return "", fmt.Errorf("build table by stat, err=%w", err)
	}

	res += table

	return res, nil
}

func (m *MessageHandler) prepareCorrectAndInvalidPeriods(periods []string) (res periods, invalid []string) {
	// –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø–µ—Ä–∏–æ–¥—É
	for i := range periods {
		// –ï—Å–ª–∏ –æ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π
		reWords := regexp.MustCompile(`^[–∞-—è–ê-–Ø—ë–Å]+$`)
		isText := reWords.MatchString(periods[i])

		// –¢–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
		if isText {
			p, ok := m.periodByText(periods[i], time.Now())
			if ok { // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
				res = append(res, p)
				continue
			}

			// –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ
			invalid = append(invalid, periods[i])
			continue
		}

		// –ò–Ω–∞—á–µ —ç—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞—Ç—ã, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∏—Ö
		p, inv := m.periodByTime(periods[i])
		invalid = append(invalid, inv...)
		if !p.IsZero() {
			res = append(res, p)
		}
	}

	return
}

func (m *MessageHandler) periodByText(text string, now time.Time) (p period, ok bool) {
	switch periodByWord[text] {
	case todayPeriod:
		p = period{
			from: time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, time.UTC),
			to:   time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), now.Minute(), now.Second(), now.Nanosecond(), time.UTC),
		}
		ok = true
	case yesterdayPeriod:
		p = period{
			from: time.Date(now.Year(), now.Month(), now.Day()-1, 0, 0, 0, 0, time.UTC),
			to:   time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, time.UTC),
		}
		ok = true
	case dayBeforeYesterdayPeriod:
		p = period{
			from: time.Date(now.Year(), now.Month(), now.Day()-2, 0, 0, 0, 0, time.UTC),
			to:   time.Date(now.Year(), now.Month(), now.Day()-1, 0, 0, 0, 0, time.UTC),
		}
		ok = true
	case weekPeriod:
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
		weekday := int(now.Weekday())
		if weekday == 0 {
			weekday = 7 // –í—Å —Å—á–∏—Ç–∞–µ–º –ø–æ—Å–ª–¥–Ω–∏–º –¥–Ω—ë–º, –∞ –Ω–µ –ø–µ—Ä–≤—ã–º
		}
		// –û—Ç–Ω–∏–º–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∫–æ–ª-–≤–æ –¥–Ω–µ–π —Ä–∞–≤–Ω–æ–µ –∏–Ω–¥–µ–∫—Å—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏. +1 –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
		monday := now.AddDate(0, 0, -weekday+1)
		p = period{
			from: time.Date(monday.Year(), monday.Month(), monday.Day(), 0, 0, 0, 0, time.UTC),
			to:   time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), now.Minute(), now.Second(), now.Nanosecond(), time.UTC),
		}
		ok = true
	case monthPeriod:
		p = period{
			from: time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, time.UTC),
			to:   time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), now.Minute(), now.Second(), now.Nanosecond(), time.UTC),
		}
		ok = true
	case yearPeriod:
		p = period{
			from: time.Date(now.Year(), 1, 1, 0, 0, 0, 0, time.UTC),
			to:   time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), now.Minute(), now.Second(), now.Nanosecond(), time.UTC),
		}
		ok = true
	}

	return
}

func (m *MessageHandler) periodByTime(interval string) (p period, invalid []string) {
	// –ò —Ä–∞–∑–∏–±–≤–∞–µ–º —á–∞—Å—Ç–∏ –ø–æ –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è —Ç–∏—Ä–µ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
	intervals := strings.Split(interval, "-")

	// –ï—Å–ª–∏ –¥–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞, —Ç–æ–≥–¥–∞ from –∏ to –æ–¥–∏–Ω–∞–∫–æ–≤—ã
	if len(intervals) == 1 {
		t, err := m.parseDate(intervals[0])
		if err != nil {
			return period{}, []string{intervals[0]}
		}

		return period{from: t, to: t}, nil
	}

	// –ï—Å–ª–∏ –¥–∞—Ç—ã –¥–≤–µ
	if len(intervals) == 2 {
		from, err := m.parseDate(intervals[0])
		if err != nil {
			invalid = append(invalid, intervals[0])
		}

		to, err := m.parseDate(intervals[1])
		if err != nil {
			invalid = append(invalid, intervals[1])
		}

		// –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏, –µ—Å–ª–∏ from –±—ã–ª –ø–æ–∑–∂–µ
		if from.After(to) {
			from, to = to, from
		}

		return period{from: from, to: to}, invalid
	}

	return period{}, []string{interval}
}

func (m *MessageHandler) parseDate(date string) (time.Time, error) {
	// –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø–æ–ª–Ω—ã–º –≥–æ–¥–æ–º
	parsed, err := time.Parse("02012006", date)
	if err != nil {
		// –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –≥–æ–¥–æ–º
		parsed, err = time.Parse("020106", date)
		if err != nil {
			return time.Time{}, err
		}
	}

	return parsed, nil
}

func (m *MessageHandler) buildTableByStat(in []db.GroupedStatistic) (string, error) {
	if len(in) == 0 {
		return "", nil
	}

	const tmpl = "" +
		"—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ\t–∫–æ–ª-–≤–æ\t–ø–æ–¥—Ö–æ–¥—ã\n" +
		"{{ range .Stat }}" +
		"{{ .Exercise }}\t{{ .SumCount }}\t{{ .Sets }}\n" +
		"{{ end }}"

	type Data struct {
		Stat []db.GroupedStatistic
	}

	return tableFromTemplate("feedTrafficDeviations", tmpl, Data{Stat: in})
}

func tableFromTemplate(name, tmpl string, data interface{}) (string, error) {
	t := template.Must(template.New(name).Parse(tmpl))
	var b strings.Builder
	b.WriteString("```\n")

	wr := tabwriter.NewWriter(&b, 0, 1, 4, ' ', 0)
	err := t.Execute(wr, data)
	if err != nil {
		return "", err
	}

	err = wr.Flush()
	if err != nil {
		return "", err
	}

	b.WriteString("```")

	return b.String(), nil
}

func (m *MessageHandler) handleHelp(rawMsg string) (string, error) {
	switch _, c := m.evaluateCmd(rawMsg); c {
	case unknownCmd:
		return m.commonHelpMsg, nil
	case addCmd:
		return m.addHelpMsg, nil
	case showCmd:
		return m.showHelpMsg, nil
	case helpCmd:
		return m.helpHelpMsg, nil
	default:
		return fmt.Sprintf("–ö–æ–º–∞–Ω–¥–∞ `%s` –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", rawMsg), nil
	}
}
