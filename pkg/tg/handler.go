package tg

import (
	"context"
	"errors"
	"fmt"
	"regexp"
	"strconv"
	"strings"
	"text/tabwriter"
	"text/template"
	"time"

	"github.com/DmiTryAgain/sports-statistics/pkg/db"

	"github.com/go-pg/pg/v10"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/vmkteam/embedlog"
)

var (
	errCantDetectLang = errors.New("can't detect language")
)

var (
	enLangRe = regexp.MustCompile(`^[a-zA-Z0-9\s.,!?'"@#$%^&*()\-_=+;:<>/\\|}{\[\]\p{So}]*$`)
	ruLangRe = regexp.MustCompile(`^[–∞-—è–ê-–Ø—ë–Å0-9\s.,!?'"@#$%^&*()\-_=+;:<>/\\|}{\[\]\p{So}]*$`)
)

type MessageHandler struct {
	embedlog.Logger

	dbc      *pg.DB
	statRepo db.StatisticRepo
	tgBot    *tgbotapi.BotAPI
	cfg      Bot
}

func New(logger embedlog.Logger, dbc *pg.DB, tgBot *tgbotapi.BotAPI, cfg Bot) *MessageHandler {
	h := &MessageHandler{
		Logger:   logger,
		dbc:      dbc,
		cfg:      cfg,
		tgBot:    tgBot,
		statRepo: db.NewStatisticRepo(dbc),
	}

	return h
}

func (m *MessageHandler) ListenAndHandle(ctx context.Context) {
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = int(m.cfg.Timeout.Duration.Seconds())

	// Get updates chan to listen to them
	updates := m.tgBot.GetUpdatesChan(updateConfig)

	// Listen messages
	for upd := range updates {
		if upd.Message == nil {
			continue
		}

		lowerText := strings.ToLower(upd.Message.Text)
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞—â–∞–ª–∏—Å—å –≤–æ–æ–±—â–µ –∫ –Ω–∞–º
		hasMention := m.hasBotMention(lowerText)
		if !hasMention && upd.FromChat().IsGroup() {
			continue // –°–∫–∏–ø–∞–µ–º, –µ—Å–ª–∏ –∫ –Ω–∞–º –Ω–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å –∏–ª–∏ –Ω–µ –ø–∏—Å–∞–ª–∏ –Ω–∞–º –≤ –ª–∏—á–∫—É
		}

		// –î–æ—Å—Ç–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		userID := strconv.FormatInt(upd.Message.From.ID, 10)
		// –ß–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç –æ—Ç –º—É—Å–æ—Ä–∞
		msgText := m.clearRawMsg(lowerText)
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
		lang, err := m.detectLang(msgText)
		if err != nil {
			m.Print(ctx, err.Error(), "msg", msgText, "userID", userID)
			m.sendMsg(upd, "Can't detect a languageüò∂ Please, use the only one keyboard layout chars")
			continue
		}

		// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
		if msgText == "" {
			m.Print(ctx, "received empty message", "rawMsg", upd.Message.Text, "userID", userID)
			m.sendMsg(upd, messagesByLang[lang][emptyMessage])
			continue
		}

		text, err := m.handle(ctx, msgText, userID, lang)
		if err != nil { // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
			text = messagesByLang[lang][errMsg]
			m.Error(ctx, "an error occurred", "rawMsg", upd.Message.Text, "userID", userID, "err", err.Error()) // –ò –ª–æ–≥–∏—Ä—É–µ–º –µ—ë
		}

		m.sendMsg(upd, text)
	}
}

// sendMsg –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func (m *MessageHandler) sendMsg(upd tgbotapi.Update, text string) {
	if text == "" {
		return
	}

	msg := tgbotapi.NewMessage(upd.Message.Chat.ID, text)
	msg.ReplyToMessageID = upd.Message.MessageID
	msg.ParseMode = m.cfg.ReplyFormat
	if _, err := m.tgBot.Send(msg); err != nil {
		// TODO: make retries
		m.Errorf("failed to send message: %v", err)
	}
}

// handle –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–º–∞–Ω–ª–æ–π
func (m *MessageHandler) handle(ctx context.Context, msgText, userID string, lang language) (string, error) {
	switch remainedText, c := m.detectCmd(msgText, lang); c {
	case addCmd:
		return m.handleAdd(ctx, remainedText, userID, lang)
	case showCmd:
		return m.handleShow(ctx, remainedText, userID, lang)
	case helpCmd:
		return m.handleHelp(ctx, remainedText, lang)
	default:
		m.Print(ctx, "received unknown command", "msg", msgText, "userID", userID)
		return fmt.Sprintf("%s. %s: %s", messagesByLang[lang][cantRecognizeCmd], messagesByLang[lang][listCmd], allCmdTextByLang(lang)), nil
	}
}

// hasBotMention –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –±–æ—Ç –∑–∞–º–µ–Ω—à–µ–Ω–µ–Ω
func (m *MessageHandler) hasBotMention(msgTxt string) bool {
	return strings.Contains(msgTxt, "@"+strings.ToLower(m.cfg.Name))
}

// detectLang –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é. –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç, –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ –∏–ª–∏ –ª–∞—Ç–∏–Ω–Ω–∏—Ü–µ –±—ã–ª —Ç–µ–∫—Å—Ç
func (m *MessageHandler) detectLang(msgTxt string) (language, error) {
	switch {
	case ruLangRe.MatchString(msgTxt):
		return langRU, nil
	case enLangRe.MatchString(msgTxt):
		return langEN, nil
	}

	return "", errCantDetectLang
}

// clearRawMsg –£–±–∏—Ä–∞–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤—ã–∑–æ–≤ –±–æ—Ç–∞, —Å–∏–º–≤–æ–ª—ã –ø—É–Ω–∫—É—Ç–∞—Ü–∏–∏, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
func (m *MessageHandler) clearRawMsg(rawMsg string) string {
	// –£–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞
	withoutMention := strings.ReplaceAll(rawMsg, "@"+strings.ToLower(m.cfg.Name), "")

	const dashPlaceHolder = "DASHPLACEHOLDER"
	// –î–µ–ª–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Å —Ç–∏—Ä–µ, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ —Ç–∏—Ä–µ
	reHyphen := regexp.MustCompile(`(\d)\s*-\s*(\d)`)
	withPlacehoder := reHyphen.ReplaceAllString(withoutMention, fmt.Sprintf("${1}%s${2}", dashPlaceHolder))

	// –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
	rePunct := regexp.MustCompile(`[[:punct:]]`)
	withoutPuncts := rePunct.ReplaceAllString(withPlacehoder, "")

	// –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç—Å—Ç—É–ø—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
	reSpaces := regexp.MustCompile(`\s+`)
	withoutSpaces := reSpaces.ReplaceAllString(withoutPuncts, " ")

	// –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏—Ä–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –º–µ—Å—Ç–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
	withDashes := strings.ReplaceAll(withoutSpaces, dashPlaceHolder, "-")

	// –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
	return strings.TrimSpace(withDashes)
}

// detectCmd –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç, –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥–∞, —Å—Ç—Ä–æ–∫—É –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏ —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
func (m *MessageHandler) detectCmd(rawMsg string, lang language) (cleaned string, cmd cmd) {
	// –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∑–∞ –∫–æ–º–∞–Ω–¥–∞
	words := strings.SplitN(rawMsg, " ", 2)
	if len(words) == 0 {
		return rawMsg, unknownCmd
	}

	if len(words) > 1 {
		cleaned = words[1]
	}

	return cleaned, cmdByLang[lang][strings.ToLower(words[0])]
}

func (m *MessageHandler) handleAdd(ctx context.Context, rawMsg, tgUserID string, lang language) (string, error) {
	if rawMsg == "" {
		m.Print(ctx, "received empty message", "msg", rawMsg, "userID", tgUserID)
		return fmt.Sprintf("%s. %s: %s", messagesByLang[lang][emptyEx], messagesByLang[lang][listEx], allExTextByLang(lang)), nil
	}

	var i int // –ù—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
	words := strings.Split(rawMsg, " ")
	ex, ok := exerciseByLang[lang][words[i]]
	if !ok {
		m.Print(ctx, "received unknown exercise", "msg", rawMsg, "userID", tgUserID, "exercise", words[0])
		return fmt.Sprintf("%s: %s. %s: %s", messagesByLang[lang][cantRecognizeEx], words[0], messagesByLang[lang][listEx], allExTextByLang(lang)), nil
	}

	// –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç—É—Ç –º–æ–≥–ª–æ –±—ã—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
	multiwordExName := words[i]
	for len(words) > i+1 {
		multiwordExName = fmt.Sprintf("%s %s", multiwordExName, words[i+1])
		multiwordEx, exists := exerciseByLang[lang][multiwordExName]
		if !exists { // –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –º—ã –Ω–∞–≤–µ—Ä–Ω–æ–µ –¥–æ—à–ª–∏ –¥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è
			break
		}

		// –ï—Å–ª–∏ –æ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 2—Ö —Å–ª–æ–≤, —Å–Ω–æ–≤–∞ —Å–¥–≤–∏–≥–∞–µ–º i –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
		if ex == multiwordEx {
			i++
			continue
		}

		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –µ—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è. –ú—ã –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ —É–∂–µ —Å–ª–µ–¥—É—é—â–µ–µ
		break
	}
	i++ // –ù–∞–º –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

	// –ï—Å–ª–∏ –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–¥–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	if ex.mustHaveCnt() {
		if len(words[i:]) < 1 { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–∞ –≤–æ–æ–±—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
			m.Print(ctx, "exercise must have count", "msg", rawMsg, "userID", tgUserID, "exercise", ex)
			return messagesByLang[lang][cntRequired], nil
		}

		cnt, err := strconv.ParseFloat(words[i], 64)
		if err != nil {
			return fmt.Sprintf("%s: %s", messagesByLang[lang][cntInvalid], words[i]), nil //nolint:nilerr
		} else if cnt < 1 {
			m.Print(ctx, "invalid exercise count", "msg", rawMsg, "userID", tgUserID, "count", cnt)
			return messagesByLang[lang][cntGE], nil
		}

		_, err = m.statRepo.AddStatistic(ctx, &db.Statistic{
			TgUserID: tgUserID,
			Exercise: ex.String(),
			Count:    cnt,
			Params:   nil,
			StatusID: 1,
		})
		if err != nil {
			return "", err
		}
	}

	return messagesByLang[lang][exAdded], nil
}

func (m *MessageHandler) handleShow(ctx context.Context, rawMsg, tgUserID string, lang language) (res string, err error) {
	if rawMsg == "" {
		m.Print(ctx, "received empty message", "msg", rawMsg, "userID", tgUserID)
		return fmt.Sprintf("%s. %s: %s", messagesByLang[lang][emptyEx], messagesByLang[lang][listEx], allExTextByLang(lang)), nil
	}

	// –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–ª–æ–≥
	rawMsg = m.clearFromTo(rawMsg, lang)
	// –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
	words := strings.Split(rawMsg, " ")

	var (
		exrs Exercises // –°—é–¥–∞ –∑–∞–ø–∏—à–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞–Ω—É—Ç—å
		i    int       // –ó–¥–µ—Å—å –∑–∞–ø–æ–º–Ω–∏–º, –Ω–∞ –∫–∞–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –≤—ã–π–¥–µ–º –∏–∑ —Ü–∏–∫–ª–∞
	)

	// –ò–¥—ë–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–ª–æ–≤—É –∏ –∏—â–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –¥–æ—Å—Ç–∞—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ñ–µ–π–ª–∞
	for i < len(words) {
		if textContainsAllExerciseWords(words[i], lang) {
			m.Print(ctx, "the message contains all exercises", "msg", rawMsg, "userID", tgUserID, "all exercises word", words[i])
			i++ // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ —Å–ª–æ–≤–æ, —Ñ–∏–ª—å—Ç—Ä –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç –≤—ã—Ç–∞—â–∏–º –∏ —Ç–∞–∫ –≤—Å—ë
			break
		}

		ex, ok := exerciseByLang[lang][words[i]]
		if !ok { // –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –º—ã –Ω–∞–≤–µ—Ä–Ω–æ–µ –¥–æ—à–ª–∏ –¥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è
			break
		}
		// –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç—É—Ç –º–æ–≥–ª–æ –±—ã—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
		multiwordExName := words[i]
		for len(words) > i+1 {
			multiwordExName = fmt.Sprintf("%s %s", multiwordExName, words[i+1])
			multiwordEx, exists := exerciseByLang[lang][multiwordExName]
			if !exists { // –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –º—ã –Ω–∞–≤–µ—Ä–Ω–æ–µ –¥–æ—à–ª–∏ –¥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è
				break
			}

			// –ï—Å–ª–∏ –æ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 2—Ö —Å–ª–æ–≤, —Å–Ω–æ–≤–∞ —Å–¥–≤–∏–≥–∞–µ–º i –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
			if ex == multiwordEx {
				i++
				continue
			}

			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –µ—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è. –ú—ã –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ —É–∂–µ —Å–ª–µ–¥—É—é—â–µ–µ
			break
		}

		exrs = append(exrs, ex)
		i++ // –°–¥–≤–∏–≥–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤—ã—à–ª–∏, –∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
	if len(exrs) == 0 && i == 0 {
		return fmt.Sprintf("%s. %s: %s", messagesByLang[lang][cantRecognizeEx], messagesByLang[lang][listEx], allExTextByLang(lang)), nil
	}

	var (
		periodsFilter periods
		invText       string
	)

	// –°–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∫—É—Å–æ–∫ —Ñ—Ä–∞–∑—ã –ø—Ä–æ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ.
	// –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥.
	// –ï—Å–ª–∏ –¥–∞, –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, —Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.
	periodWords := words[i:]
	if len(periodWords) > 0 {
		// –°–ª–µ–ø–∏–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∫—É –ø–æ–¥ –ø–µ—Ä–∏–æ–¥
		periodLeftPart := strings.Join(periodWords, " ")
		// –ï—Å–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç —Å–ø–µ—Ü —Ñ—Ä–∞–∑—ã –¥–ª—è –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
		if !textContainsAllPeriodWords(periodLeftPart, lang) {
			var invPeriods []string
			// –¢–æ –∏–¥—ë–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–µ–Ω—Ç
			periodsFilter, invPeriods = m.prepareCorrectAndInvalidPeriods(ctx, periodWords, lang)
			invText = strings.Join(invPeriods, ", ")
		}
	}

	// –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
	if invText != "" {
		res += fmt.Sprintf("%s: %s\n", messagesByLang[lang][periodsInvalid], invText)
	}

	// –¢–µ–ø–µ—Ä—å –∏–¥—ë–º –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
	s := db.GroupedStatisticSearch{
		StatisticSearch: db.StatisticSearch{
			TgUserID:  &tgUserID,
			Exercises: exrs.StringSlice(),
		},
		Periods: periodsFilter.ToDB(),
	}
	stats, err := m.statRepo.GroupedStatisticByFilters(ctx, s)
	if err != nil {
		return "", fmt.Errorf("fetch statistic, err=%w", err)
	}

	// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º
	if len(stats) == 0 {
		return res + messagesByLang[lang][nothingFound], nil
	}

	table, err := m.buildTableByStat(ctx, stats, lang)
	if err != nil {
		return "", fmt.Errorf("build table by stat, err=%w", err)
	}

	res += table

	return res, nil
}

func (m *MessageHandler) clearFromTo(in string, lang language) string {
	for _, s := range cleanByLang[lang] {
		if strings.Contains(in, s) {
			in = strings.ReplaceAll(in, strings.TrimRight(s, " "), "")
		}
	}

	return in
}

func (m *MessageHandler) prepareCorrectAndInvalidPeriods(ctx context.Context, periods []string, lang language) (res periods, invalid []string) {
	// –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø–µ—Ä–∏–æ–¥—É
	for i := range periods {
		// –ï—Å–ª–∏ –æ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π
		isText := m.langReByLang(lang).MatchString(periods[i])

		// –¢–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
		if isText {
			p, ok := m.periodByText(periods[i], time.Now(), lang)
			if ok { // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
				res = append(res, p)
				continue
			}

			// –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ
			m.Print(ctx, "captured invalid text period", "period", periods[i])
			invalid = append(invalid, periods[i])
			continue
		}

		// –ò–Ω–∞—á–µ —ç—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞—Ç—ã, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∏—Ö
		p, inv := m.periodByTime(ctx, periods[i])
		invalid = append(invalid, inv...)
		if !p.IsZero() {
			res = append(res, p)
		}
	}

	return
}

// langReByLang –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—Ä–∞–∑—ã, —á—Ç–æ –æ–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –≤ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ
func (m *MessageHandler) langReByLang(lang language) *regexp.Regexp {
	switch lang {
	case langRU:
		return regexp.MustCompile(`^[–∞-—è–ê-–Ø—ë–Å]+$`)
	case langEN:
		return regexp.MustCompile(`^[a-zA-Z]+$`)
	}

	return nil
}

func (m *MessageHandler) periodByText(text string, now time.Time, lang language) (p period, ok bool) {
	switch periodByLang[lang][text] {
	case todayPeriod:
		p = period{
			from: time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, time.UTC),
			to:   time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), now.Minute(), now.Second(), now.Nanosecond(), time.UTC),
		}
		ok = true
	case yesterdayPeriod:
		p = period{
			from: time.Date(now.Year(), now.Month(), now.Day()-1, 0, 0, 0, 0, time.UTC),
			to:   time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, time.UTC),
		}
		ok = true
	case dayBeforeYesterdayPeriod:
		p = period{
			from: time.Date(now.Year(), now.Month(), now.Day()-2, 0, 0, 0, 0, time.UTC),
			to:   time.Date(now.Year(), now.Month(), now.Day()-1, 0, 0, 0, 0, time.UTC),
		}
		ok = true
	case weekPeriod:
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
		weekday := int(now.Weekday())
		if weekday == 0 {
			weekday = 7 // –í—Å —Å—á–∏—Ç–∞–µ–º –ø–æ—Å–ª–¥–Ω–∏–º –¥–Ω—ë–º, –∞ –Ω–µ –ø–µ—Ä–≤—ã–º
		}
		// –û—Ç–Ω–∏–º–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∫–æ–ª-–≤–æ –¥–Ω–µ–π —Ä–∞–≤–Ω–æ–µ –∏–Ω–¥–µ–∫—Å—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏. +1 –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
		monday := now.AddDate(0, 0, -weekday+1)
		p = period{
			from: time.Date(monday.Year(), monday.Month(), monday.Day(), 0, 0, 0, 0, time.UTC),
			to:   time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), now.Minute(), now.Second(), now.Nanosecond(), time.UTC),
		}
		ok = true
	case monthPeriod:
		p = period{
			from: time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, time.UTC),
			to:   time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), now.Minute(), now.Second(), now.Nanosecond(), time.UTC),
		}
		ok = true
	case yearPeriod:
		p = period{
			from: time.Date(now.Year(), 1, 1, 0, 0, 0, 0, time.UTC),
			to:   time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), now.Minute(), now.Second(), now.Nanosecond(), time.UTC),
		}
		ok = true
	}

	return
}

func (m *MessageHandler) periodByTime(ctx context.Context, interval string) (p period, invalid []string) {
	// –ò —Ä–∞–∑–∏–±–≤–∞–µ–º —á–∞—Å—Ç–∏ –ø–æ –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è —Ç–∏—Ä–µ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
	intervals := strings.Split(interval, "-")

	// –ï—Å–ª–∏ –¥–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞, —Ç–æ–≥–¥–∞ from –∏ to –æ–¥–∏–Ω–∞–∫–æ–≤—ã
	if len(intervals) == 1 {
		t, err := m.parseDate(intervals[0])
		if err != nil {
			m.Print(ctx, "captured invalid single number period", "period", intervals[0])
			return period{}, []string{intervals[0]}
		}

		return period{from: t, to: t}, nil
	}

	// –ï—Å–ª–∏ –¥–∞—Ç—ã –¥–≤–µ
	if len(intervals) == 2 {
		from, err := m.parseDate(intervals[0])
		if err != nil {
			m.Print(ctx, "captured invalid interval", "period", intervals[0], "intervals", intervals)
			invalid = append(invalid, intervals[0])
		}

		to, err := m.parseDate(intervals[1])
		if err != nil {
			m.Print(ctx, "captured invalid interval", "period", intervals[1], "intervals", intervals)
			invalid = append(invalid, intervals[1])
		}

		// –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏, –µ—Å–ª–∏ from –±—ã–ª –ø–æ–∑–∂–µ
		if from.After(to) {
			from, to = to, from
		}

		return period{from: from, to: to}, invalid
	}

	return period{}, []string{interval}
}

func (m *MessageHandler) parseDate(date string) (time.Time, error) {
	// –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø–æ–ª–Ω—ã–º –≥–æ–¥–æ–º
	parsed, err := time.Parse("02012006", date)
	if err != nil {
		// –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –≥–æ–¥–æ–º
		parsed, err = time.Parse("020106", date)
		if err != nil {
			return time.Time{}, err
		}
	}

	return parsed, nil
}

func (m *MessageHandler) buildTableByStat(ctx context.Context, in []db.GroupedStatistic, lang language) (string, error) {
	if len(in) == 0 {
		m.Print(ctx, "captured empty statistic list")
		return "", nil
	}

	tmpl := fmt.Sprintf(""+
		"%s\t%s\t%s\n"+
		"{{ range .Stat }}"+
		"{{ .TranslatedExercise }}\t{{ .SumCount }}\t{{ .Sets }}\n"+
		"{{ end }}", messagesByLang[lang][tableExCol], messagesByLang[lang][tableCntCol], messagesByLang[lang][tableSetCol],
	)

	type Data struct {
		Stat []GroupedStatistic
	}

	return tableFromTemplate("feedTrafficDeviations", tmpl, Data{Stat: NewGroupedStatisticList(in, lang)})
}

func tableFromTemplate(name, tmpl string, data interface{}) (string, error) {
	t := template.Must(template.New(name).Parse(tmpl))
	var b strings.Builder
	b.WriteString("```\n")

	wr := tabwriter.NewWriter(&b, 0, 1, 4, ' ', 0)
	err := t.Execute(wr, data)
	if err != nil {
		return "", err
	}

	err = wr.Flush()
	if err != nil {
		return "", err
	}

	b.WriteString("```")

	return b.String(), nil
}

func (m *MessageHandler) handleHelp(ctx context.Context, rawMsg string, lang language) (string, error) {
	switch _, c := m.detectCmd(rawMsg, lang); c {
	case unknownCmd:
		return fmt.Sprintf(messagesByLang[lang][commonHelpMsg], m.cfg.Name), nil
	case addCmd:
		return fmt.Sprintf(messagesByLang[lang][addHelpMsg], m.cfg.Name) +
			fmt.Sprintf("%s: %s", messagesByLang[lang][listEx], allExTextByLang(lang)), nil
	case showCmd:
		return fmt.Sprintf(messagesByLang[lang][showHelpMsg], m.cfg.Name) +
			fmt.Sprintf("%s: %s", messagesByLang[lang][listPeriod], allPeriodsByLang(lang)), nil
	case helpCmd:
		return messagesByLang[lang][helpHelpMsg], nil
	default:
		m.Print(ctx, "captured invalid command to show help", "msg", rawMsg, "command", c)
		return fmt.Sprintf("`%s` %s", rawMsg, messagesByLang[lang][cmdNotSupported]), nil
	}
}
