package tg

import (
	"bytes"
	"fmt"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/DmiTryAgain/sports-statistics/config"
	"github.com/DmiTryAgain/sports-statistics/pkg/db"
	"github.com/DmiTryAgain/sports-statistics/pkg/embedlog"
	"github.com/DmiTryAgain/sports-statistics/pkg/statistic"

	"github.com/go-pg/pg/v10"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const chatTypeGroup = "group"
const dbErrorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ë–î!"

type MessageHandler struct {
	db          db.DB
	dbc         *pg.DB
	logger      embedlog.Logger
	tgBot       *tgbotapi.BotAPI
	statManager statistic.Manager
	cfg         config.Bot
}

func New(logger embedlog.Logger, db db.DB, dbc *pg.DB, tgBot *tgbotapi.BotAPI, cfg config.Bot) *MessageHandler {
	return &MessageHandler{
		db:          db,
		dbc:         dbc,
		cfg:         cfg,
		tgBot:       tgBot,
		logger:      logger,
		statManager: statistic.NewManager(db, logger),
	}
}

func (m *MessageHandler) ListenAndHandle() {
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = int(m.cfg.Timeout)

	// Get updates chan to listen to them
	updates := m.tgBot.GetUpdatesChan(updateConfig)

	// Listen messages
	for update := range updates {
		if update.Message == nil {
			continue
		}

		// Now that we know we've gotten a new message, we can construct a
		// reply! We'll take the Chat ID and Text from the incoming message
		// and use it to create a new message.
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)
		// We'll also say that this message is a reply to the previous message.
		// For any other specifications than Chat ID or Text, you'll need to
		// set fields on the `MessageConfig`.
		msg.ReplyToMessageID = update.Message.MessageID

		// Okay, we're sending our message off! We don't care about the message
		// we just sent, so we'll discard it.
		if _, err := m.tgBot.Send(msg); err != nil {
			// Note that panics are a bad way to handle errors. Telegram can
			// have service outages or network errors, you should retry sending
			// messages or more gracefully handle failures.
			m.logger.Errorf("failed to send message: %v", err)
		}
	}
}

func (m *MessageHandler) Handle(upd tgbotapi.Update) (*Response, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–∑–∞–ª–∏—Å—å –≤–æ–æ–±—â–µ –∫ –Ω–∞–º
	hasMention := m.hasBotMention(upd.Message.Text)
	if !hasMention && upd.FromChat().IsGroup() {
		return nil, nil // –°–∫–∏–ø–∞–µ–º, –µ—Å–ª–∏ –∫ –Ω–∞–º –Ω–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å –∏–ª–∏ –Ω–µ –ø–∏—Å–∞–ª–∏ –Ω–∞–º –≤ –ª–∏—á–∫—É
	}

	msgText := m.clearRawMsg(upd.Message.Text)
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
	if res := m.handleEmptyMessage(msgText); res != nil {
		return res, nil
	}

	switch m.evaluateCmd(msgText) {
	case addCmd:
		return m.handleAddCommand(msgText)
	case showCmd:
		return m.handleShowCommand()
	case helpCmd:
		return m.handleHelpCommand(msgText)
	default:
		return &Response{Message: "–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥—ë–Ω—É—é –í–∞–º–∏ –∫–æ–º–∞–Ω–¥—É"}, nil
	}
}

// hasBotMention –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –±–æ—Ç –∑–∞–º–µ–Ω—à–µ–Ω–µ–Ω
func (m *MessageHandler) hasBotMention(msgTxt string) bool {
	lowerBotName := strings.ToLower(m.cfg.Name)
	return strings.Contains(msgTxt, "@"+lowerBotName)
}

func (m *MessageHandler) handleEmptyMessage(msgTxt string) *Response {
	if msgTxt == "" {
		return &Response{Message: "–ß—ë?"}
	}

	return nil
}

// clearRawMsg –£–±–∏—Ä–∞–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤—ã–∑–æ–≤ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∑–∞—Ç–µ–º —É–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –∏ –ø–æ—Å–ª–µ - –ø—Ä–æ–±–µ–ª—ã
func (m *MessageHandler) clearRawMsg(rawMsg string) string {
	clearMention := strings.ReplaceAll(rawMsg, strings.ToLower(m.cfg.Name), "")
	clearLines := strings.Trim(clearMention, string(filepath.Separator))
	return strings.Trim(clearLines, " ")
}

// evaluateCmd –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç, –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥–∞
func (m *MessageHandler) evaluateCmd(rawMsg string) cmd {
	// –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∑–∞ –∫–æ–º–∞–Ω–¥–∞
	words := strings.Split(rawMsg, " ")
	if len(words) < 2 {
		return unknownCmd
	}

	return cmdByWord[strings.ToLower(words[0])]
}

func (m *MessageHandler) handleAddCommand(msgText string) (*Response, error) {
	if !m.validator.CheckMinCorrectLen(words) {
		return "–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.", true, nil
	}

	training := words[m.sliceHelper.FirstSliceElemIndex()]

	trainingIsValid, err := m.validator.CheckIsOnlyRussianText(training)

	if err != nil {
		return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å!", true, err
	}

	if !trainingIsValid {
		return "–£–∫–∞–∑–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤.", true, nil
	}

	count := words[m.sliceHelper.SecondSliceElemIndex()]

	isValidCount, err := m.validator.CheckIsOnlyInt(count)

	if err != nil {
		return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å!", true, err
	}

	if !isValidCount {
		return "–£–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.", true, nil
	}

	countInt, err := strconv.Atoi(count)

	if err != nil {
		return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å!", true, err
	}

	trainingEntity := m.trainingRepository.GetTrainingByName(training)

	if err != nil {
		fmt.Println(err)
		return dbErrorMessage, true, err
	}

	m.statisticRepository.AddStatistic(
		new(statistic.Statistic).Construct(
			nil,
			trainingEntity,
			new(statistic.User).Construct(new(user.Id).Construct(dto.GetUserId())),
			nil,
			new(statistic.Count).Construct(countInt),
			nil,
		),
	)

	err = m.statisticRepository.GetError()
	fmt.Println(err)
	if err != nil {
		return dbErrorMessage, true, err
	}

	return fmt.Sprintf("–î–æ–±–∞–≤–ª–µ–Ω–æ %s %d ", training, countInt), true, nil
}

func (m *MessageHandler) handleShowCommand(dto *message_handler.Dto) (string, bool, error) {
	inputByPeriod := m.sliceHelper.SplitStringToSlice(dto.GetText(), " –∑–∞ ")

	if !m.validator.CheckMinCorrectLenForPeriods(inputByPeriod) {
		return "–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏ –ø–µ—Ä–∏–æ–¥.", true, nil
	}

	firstSliceIndex := m.sliceHelper.FirstSliceElemIndex()

	inputTrainings := m.sliceHelper.DeleteElemFromSlice(
		m.sliceHelper.SplitStringToSlice(
			inputByPeriod[firstSliceIndex],
			" ",
		),
		firstSliceIndex,
	)

	inputTrainingsAnyElems := m.sliceHelper.ConvertFromStringToAnyElems(inputTrainings)

	rawPeriods := m.sliceHelper.DeleteElemFromSlice(inputByPeriod, firstSliceIndex)

	correctPeriods, _, err := m.prepareCorrectAndInvalidPeriods(rawPeriods)

	if err != nil {
		return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å!", true, err
	}

	stat := m.statisticRepository.GetByConditions(inputTrainingsAnyElems, correctPeriods, dto.GetUserId())

	if m.sliceHelper.IsEmptySliceStatisticEntity(stat) {
		return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. " +
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–∏–æ–¥.", true, err
	} else {
		resultMessage := "–í—ã —Å–¥–µ–ª–∞–ª–∏:\n"

		for _, result := range stat {
			resultMessage += fmt.Sprintf(
				"%v –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ %v —Ä–∞–∑, –∑–∞ %v –ø–æ–¥—Ö–æ–¥–∞(–æ–≤).",
				result.GetTraining().GetName().GetValue(),
				result.GetCount().GetValue(),
				result.GetsSets().GetValue(),
			)
		}

		return resultMessage, true, nil
	}

}
func (m *MessageHandler) handleHelpCommand(rawMsg string) (*Response, error) {
	message := fmt.Sprintf(
		"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–≤–æ–∏—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π."+
			"–¢—ã –∂–µ –≤–µ–¥—å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Å–ø–æ—Ä—Ç–æ–º, –≤–µ—Ä–Ω–æ?ü§î\n"+
			"–í –≥—Ä—É–ø–ø–∞—Ö –æ–±—Ä–∞—â–∞–π—Å—è –∫–æ –º–Ω–µ –≤–æ—Ç —Ç–∞–∫: `@%s`, —á—Ç–æ–±—ã —è —Ç–µ–±—è —Å–ª—É—à–∞–ª.\n"+
			"–í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –º–æ–∂–Ω–æ –∏ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è, —Ç–∞–º —è —Å–ª—É—à–∞—é –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è."+
			"–ü–æ—Å–ª–µ –æ–±—Ä–∞—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É."+
			"–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥: \n"+
			"–ù–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: `–°–¥–µ–ª–∞–ª` –∏–ª–∏ `–î–æ–±–∞–≤—å` \n"+
			"–ù–∞ –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: `–ü–æ–∫–∞–∂–∏` \n"+
			"–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–º–º–∞–Ω–¥–µ, –æ—Ç–ø—Ä–∞–≤—å: `–ø–æ–º–æ—â—å` *–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã*\n"+
			"–ù–∞–ø—Ä–∏–º–µ—Ä: `–ü–æ–º–æ—â—å –î–æ–±–∞–≤—å`",
		m.cfg.Name,
	)

	words := strings.Split(rawMsg, " ")
	if len(words) < 2 {
		return &Response{Message: message}, nil
	}

	switch m.evaluateCmd(words[0]) {
	case addCmd:
		message = fmt.Sprintf(
			"–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (`—Å–¥–µ–ª–∞–ª`). –ó–∞—Ç–µ–º, —á–µ—Ä–µ–∑ "+
				"–ø—Ä–æ–±–µ–ª —É–∫–∞–∂–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–¥–µ–ª–∞–ª. –î–∞–ª–µ–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —É–∫–∞–∂–∏ —Å–¥–µ–ª–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ \n"+
				"–ù–∞–ø—Ä–∏–º–µ—Ä, —Ç—ã —Å–¥–µ–ª–∞–ª –ø–æ–¥—Ö–æ–¥ –∏–∑ 10 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π. –ß—Ç–æ–±—ã —è –≤—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–∏—Å–∞–ª, –Ω–∞–ø–∏—à–∏ –º–Ω–µ "+
				"`@%s —Å–¥–µ–ª–∞–ª –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ 10`\n"+
				"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: `%s`",
			m.cfg.Name,
			exercises().String(),
		)
	case showCmd:
		periodsStr := strings.Join(m.periodsRepository.GetAllowTextPeriods(), "`, `")
		message = fmt.Sprintf(
			"–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É `%s`. –ó–∞—Ç–µ–º —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É "+
				"–∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å. *–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ä–∞–∑–¥–µ–ª–∏–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∑–∞–ø—è—Ç–æ–π,* "+
				"–Ω–∞–ø—Ä–∏–º–µ—Ä, `–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ, –æ—Ç–∂–∏–º–∞–Ω–∏–µ`.\n"+
				"–î–∞–ª–µ–µ —É–∫–∞–∂–∏ –ø–µ—Ä–∏–æ–¥, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–µ—Ä–∏–æ–¥ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ "+
				"—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥—É–µ—Ç –ø—Ä–µ–¥–ª–æ–≥ *–∑–∞*. –ü–µ—Ä–∏–æ–¥–æ–≤ –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å "+
				"–Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω—É–∂–Ω–æ —Ç–∞–∫ –∂–µ –Ω—É–∂–µ–Ω –ø—Ä–µ–¥–ª–æ–≥ *–∑–∞*.\n"+
				"–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞ 15.10.2022, "+
				"–∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 01.10.2022 –ø–æ 10.10.2022. –ß—Ç–æ–±—ã –ø–µ—Ä–∏–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤–≤–µ–¥–∏ –ø–µ—Ä–∏–æ–¥—ã"+
				"—Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n"+
				"`–∑–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞ 15.10.2022, –∑–∞ 01.10.2022-10.10.2022`\n"+
				"–ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –±–µ–∑ —É—á—ë—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ï—Å–ª–∏ –ø—Ä–∏ "+
				"–≤–≤–æ–¥–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–∞—Ç–∞ *–æ—Ç* –æ–∫–∞–∂–µ—Ç—Å—è –±–æ–ª—å—à–µ –¥–∞—Ç—ã *–¥–æ*, –æ–Ω–∏ –ø–æ–º–µ–Ω—è—é—Ç—Å—è –º–µ—Å—Ç–∞–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ —ç—Ç–æ—Ç "+
				"–ø–µ—Ä–∏–æ–¥ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"+
				"–í –∏—Ç–æ–≥–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: \n"+
				"`@%s –ø–æ–∫–∞–∂–∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ, –æ—Ç–∂–∏–º–∞–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞ 15.10.2022, –∑–∞ 01.10.2022-10.10.2022`\n"+
				"–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: `%s`",
			showCommands,
			botName,
			periodsStr,
		)
	case helpCmd:
		message = "–ü–æ–º–æ—â—å –∫ –∫–æ–º–∞–Ω–¥–µ –ø–æ–º–æ—â–∏ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞. " +
			"–ù–∞–¥–æ –∂ –±—ã–ª–æ –¥–æ–¥—É–º–∞—Ç—å—Å—è –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å –∫–æ–º–∞–Ω–¥–µ –ø–æ–º–æ—â–∏ü§î"
	return &Response{Message: message}, nil
}

func (m *MessageHandler) prepareDateInterval(interval string) ([]string, []string) {
	firstSliceIndex := m.sliceHelper.FirstSliceElemIndex()
	secondSliceIndex := m.sliceHelper.SecondSliceElemIndex()
	intervals := m.sliceHelper.SplitStringDatesToSlice(interval)
	var result []string
	var invalidPeriods []string

	if m.sliceHelper.CheckLenSlice(intervals, 1) {
		formattedInterval, err := m.getDateFromNums(intervals[firstSliceIndex])

		if err != nil {
			invalidPeriods = append(invalidPeriods, intervals[firstSliceIndex])
		}

		return append(result, formattedInterval), invalidPeriods
	}

	if m.sliceHelper.CheckLenSlice(intervals, 2) {
		formattedIntervalBegin, errBegin := m.getDateFromNums(intervals[firstSliceIndex])
		formattedIntervalEnd, errEnd := m.getDateFromNums(intervals[secondSliceIndex])

		if errBegin != nil {
			invalidPeriods = append(invalidPeriods, intervals[firstSliceIndex])
		}

		if errEnd != nil {
			invalidPeriods = append(invalidPeriods, intervals[secondSliceIndex])
		}

		if formattedIntervalBegin > formattedIntervalEnd {
			formattedIntervalBegin, formattedIntervalEnd = formattedIntervalEnd, formattedIntervalBegin
		}

		result = append(result, formattedIntervalBegin)
		return append(result, formattedIntervalEnd), invalidPeriods
	}

	invalidPeriods = append(invalidPeriods, "all")

	return result, invalidPeriods
}

func (m *MessageHandler) getDateFromNums(nums string) (string, error) {
	parse, err := time.Parse("02012006", nums)
	if err != nil {
		parse, err = time.Parse("020106", nums)
		if err != nil {
			return "", err
		}
	}

	return parse.Format("2006-01-02"), nil
}

func (m *MessageHandler) prepareCorrectAndInvalidPeriods(periods []string) ([]string, []string, error) {
	var correctPeriods []string
	var invalidPeriods []string
	firstSliceIndex := m.sliceHelper.FirstSliceElemIndex()

	for _, period := range periods {
		isValidText, err := m.validator.CheckIsOnlyRussianText(period)

		if err != nil {
			return correctPeriods, invalidPeriods, err
		}

		if isValidText {
			val, ok := m.periodsRepository.GetConditionsByPeriod(period)
			if ok {
				correctPeriods = append(correctPeriods, val)
			} else {
				invalidPeriods = append(invalidPeriods, period)
			}
		} else {
			numsPeriod, invalidDatePeriods := m.prepareDateInterval(period)
			if !m.sliceHelper.IsEmptySlice(invalidDatePeriods) {
				for _, invalid := range invalidDatePeriods {
					invalidPeriods = append(invalidPeriods, invalid)
				}
			} else {
				if m.sliceHelper.CheckLenSlice(numsPeriod, 1) {
					correctPeriods = append(
						correctPeriods,
						m.periodsRepository.GetConditionsByDate(numsPeriod[firstSliceIndex]),
					)
				}

				if m.sliceHelper.CheckLenSlice(numsPeriod, 2) {
					correctPeriods = append(
						correctPeriods,
						m.periodsRepository.GetConditionsByDateInterval(
							numsPeriod[firstSliceIndex],
							numsPeriod[m.sliceHelper.SecondSliceElemIndex()],
						),
					)
				}
			}
		}
	}

	return correctPeriods, invalidPeriods, nil
}
