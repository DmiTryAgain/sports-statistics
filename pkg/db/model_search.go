// Code generated by mfd-generator v0.4.5; DO NOT EDIT.

//nolint:all
//lint:file-ignore U1000 ignore unused code, it's generated
package db

import (
	"time"

	"github.com/go-pg/pg/v10"
	"github.com/go-pg/pg/v10/orm"
)

const condition = "?.? = ?"

// base filters
type applier func(query *orm.Query) (*orm.Query, error)

type search struct {
	appliers []applier
}

func (s *search) apply(query *orm.Query) {
	for _, applier := range s.appliers {
		query.Apply(applier)
	}
}

func (s *search) where(query *orm.Query, table, field string, value interface{}) {
	query.Where(condition, pg.Ident(table), pg.Ident(field), value)
}

func (s *search) WithApply(a applier) {
	if s.appliers == nil {
		s.appliers = []applier{}
	}
	s.appliers = append(s.appliers, a)
}

func (s *search) With(condition string, params ...interface{}) {
	s.WithApply(func(query *orm.Query) (*orm.Query, error) {
		return query.Where(condition, params...), nil
	})
}

// Searcher is interface for every generated filter
type Searcher interface {
	Apply(query *orm.Query) *orm.Query
	Q() applier

	With(condition string, params ...interface{})
	WithApply(a applier)
}

type StatisticSearch struct {
	search

	ID            *int
	TgUserID      *string
	Exercise      *string
	CreatedAt     *time.Time
	StatusID      *int
	Count         *float64
	IDs           []int
	Exercises     []string
	TgUserIDILike *string
	ExerciseILike *string
	CreatedAtFrom *time.Time
	CreatedAtTo   *time.Time
}

func (ss *StatisticSearch) Apply(query *orm.Query) *orm.Query {
	if ss == nil {
		return query
	}
	if ss.ID != nil {
		ss.where(query, Tables.Statistic.Alias, Columns.Statistic.ID, ss.ID)
	}
	if ss.TgUserID != nil {
		ss.where(query, Tables.Statistic.Alias, Columns.Statistic.TgUserID, ss.TgUserID)
	}
	if ss.Exercise != nil {
		ss.where(query, Tables.Statistic.Alias, Columns.Statistic.Exercise, ss.Exercise)
	}
	if ss.CreatedAt != nil {
		ss.where(query, Tables.Statistic.Alias, Columns.Statistic.CreatedAt, ss.CreatedAt)
	}
	if ss.StatusID != nil {
		ss.where(query, Tables.Statistic.Alias, Columns.Statistic.StatusID, ss.StatusID)
	}
	if ss.Count != nil {
		ss.where(query, Tables.Statistic.Alias, Columns.Statistic.Count, ss.Count)
	}
	if len(ss.IDs) > 0 {
		Filter{Columns.Statistic.ID, ss.IDs, SearchTypeArray, false}.Apply(query)
	}
	if len(ss.Exercises) > 0 {
		Filter{Columns.Statistic.Exercise, ss.Exercises, SearchTypeArray, false}.Apply(query)
	}
	if ss.TgUserIDILike != nil {
		Filter{Columns.Statistic.TgUserID, *ss.TgUserIDILike, SearchTypeILike, false}.Apply(query)
	}
	if ss.ExerciseILike != nil {
		Filter{Columns.Statistic.Exercise, *ss.ExerciseILike, SearchTypeILike, false}.Apply(query)
	}
	if ss.CreatedAtFrom != nil {
		Filter{Columns.Statistic.CreatedAt, *ss.CreatedAtFrom, SearchTypeGE, false}.Apply(query)
	}
	if ss.CreatedAtTo != nil {
		Filter{Columns.Statistic.CreatedAt, *ss.CreatedAtTo, SearchTypeLE, false}.Apply(query)
	}

	ss.apply(query)

	return query
}

func (ss *StatisticSearch) Q() applier {
	return func(query *orm.Query) (*orm.Query, error) {
		if ss == nil {
			return query, nil
		}
		return ss.Apply(query), nil
	}
}
