package main

import (
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
	"log"
	"os"
	"regexp"
	"strconv"
	"strings"
)

const TOKEN = "TELEGRAM_BOT_TOKEN"
const BOT_NAME = "TELEGRAM_BOT_NAME"

const DB_USERNAME = "DB_USERNAME"
const DB_PASSWORD = "DB_PASSWORD"
const DB_DATABASE = "DB_DATABASE"
const DB_CHARSET = "DB_CHARSET"
const DB_HOST = "DB_HOST"
const DB_DSN = "DB_DSN"
const DB_TYPE = "DB_TYPE"

const CHAT_TYPE_GROUP = "group"

type Training struct {
	Id          int
	Alias, Name string
}

// init is invoked before main()
func init() {
	if err := godotenv.Load(".env", "docker\\.env"); err != nil {
		log.Print("–°–æ–∑–¥–∞–π .env (—Å–º–æ—Ç—Ä–∏ .env-sample)")
		panic(err)
	}
}

func main() {
	var token, _ = os.LookupEnv(TOKEN)
	var botName, _ = os.LookupEnv(BOT_NAME)
	//var dbUser, _ = os.LookupEnv(DB_USERNAME)
	//var dbPass, _ = os.LookupEnv(DB_PASSWORD)
	//var dbName, _ = os.LookupEnv(DB_DATABASE)
	//var dbCharset, _ = os.LookupEnv(DB_CHARSET)
	//var dbHost, _ = os.LookupEnv(DB_HOST)
	var dbDsn, _ = os.LookupEnv(DB_DSN)
	var dbType, _ = os.LookupEnv(DB_TYPE)

	bot := createBot(token)

	//bot.Debug = true

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, _ := bot.GetUpdatesChan(u)

	for update := range updates {
		input := prepareInput(update.Message.Text)
		lowerBotName := strings.ToLower(botName)

		if !checkBotCall(update, input[0], lowerBotName) && update.Message.Chat.Type == CHAT_TYPE_GROUP {
			continue
		} else if checkBotCall(update, input[0], lowerBotName) {
			input = deleteElemFromSlice(input, 0)

			if len(input) == 0 {
				sendMessage(bot, update, "–ß—ë?")
				continue
			}
		}

		log.Printf("Message info: \n"+
			"UserName: %s\n"+
			"ChatId: %d\n"+
			"ChatType: %s\n"+
			"Message: %s\n"+
			"UserId: %d\n",
			update.Message.Chat.UserName,
			update.Message.Chat.ID,
			update.Message.Chat.Type,
			update.Message.Text,
			update.Message.From.ID,
		)

		command, isValidCommand := checkIsText(input[0])

		//–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
		if !isValidCommand {
			sendMessage(bot, update, "–ö–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
			continue
		}

		db, err := sql.Open(dbType, dbDsn)

		if err != nil {
			sendMessage(bot, update, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %d ", err))
		}

		switch command {
		case "—Å–¥–µ–ª–∞–ª":

			if len(input) < 3 {
				sendMessage(bot, update, "–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.")
				continue
			}

			training, isValidTraining := checkIsText(input[1])

			//–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
			if !isValidTraining {
				sendMessage(bot, update, "–£–∫–∞–∑–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
				continue
			}

			count, isValidCount := checkIsInt(input[2])

			//–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
			if !isValidCount {
				sendMessage(bot, update, "–£–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
				continue
			}

			//–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ë–î
			findTrain, err := db.Query(fmt.Sprintf("SELECT * from `training` where `Name` = '%s' LIMIT 1", training))

			if err != nil {
				sendMessage(bot, update, fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ë–î: %d ", err))
				continue
			}

			var trainings []Training
			var train Training

			for findTrain.Next() {
				err = findTrain.Scan(&train.Id, &train.Alias, &train.Name)
				if err != nil {
					sendMessage(bot, update, fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ë–î: %d ", err))
				}

				trainings = append(trainings, train)
			}

			if train.Id == 0 {
				sendMessage(bot, update, fmt.Sprintf("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", training))
				err := findTrain.Close()

				if err != nil {
					sendMessage(bot, update, fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ë–î: %d ", err))
				}

				continue
			}

			insert, err := db.Query(
				fmt.Sprintf(
					"INSERT INTO `statistic` (`telegram_user_id`, `training_id`, `count`) VALUES('%d', '%d', '%d')",
					update.Message.From.ID,
					train.Id,
					count,
				),
			)

			insert.Close()

			if err != nil {
				panic(err)
			}

			findTrain.Close()

			sendMessage(bot, update, fmt.Sprintf("–î–æ–±–∞–≤–ª–µ–Ω–æ %s %d ", training, count))

		case "—É–¥–∞–ª–∏":
			sendMessage(bot, update, fmt.Sprintf("–ö–æ–º–∞–Ω–¥–∞ \"%s\" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", command))
		case "–ø–æ–∫–∞–∂–∏":
			sendMessage(bot, update, fmt.Sprintf("–ö–æ–º–∞–Ω–¥–∞ \"%s\" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", command))
		case "help", "–ø–æ–º–æ–≥–∏", "–ø–æ–º–æ—â—å":
			sendMessage(
				bot,
				update,
				fmt.Sprintf(
					"–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ "+
						"—Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ—à—å. –¢—ã –∂–µ –≤–µ–¥—å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Å–ø–æ—Ä—Ç–æ–º, –≤–µ—Ä–Ω–æ?ü§î\n"+
						"–¢–∞–∫ –≤–æ—Ç, —á—Ç–æ–± –±—ã–ª–æ —É–¥–æ–±–Ω–æ –≤–µ—Å—Ç–∏ —É—á—ë—Ç –∏ —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Ç—ã –º–æ–∂–µ—à—å —ç—Ç–æ –¥–µ–ª–∞—Ç—å "+
						"—Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ –∫–æ –º–Ω–µ.\n"+
						"–Ø —Å–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—ã, –∫–æ–≥–¥–∞ –∫–æ –º–Ω–µ –æ–±—Ä–∞—â–∞—é—Ç—Å—è. –æ–±—Ä–∞—Ç–∏—Å—å –∫–æ –º–Ω–µ –≤–æ—Ç —Ç–∞–∫: `@%s`\n"+
						"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏—á–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞. –ï—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å –º–Ω–µ –≤ –ª–∏—á–∫—É, —è –±—É–¥—É —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ "+
						"–ª—é–±—ã–µ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–æ –∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ–±—Ä–∞—â–µ–Ω–∏–µ, "+
						"–µ—Å–ª–∏ —É–∂ —Å–∏–ª—å–Ω–æ —Ö–æ—á–µ—Ç—Å—è)\n"+
						"–ü–æ—Å–ª–µ –æ–±—Ä–∞—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –∫ –Ω–µ–π –¥–∞–Ω–Ω—ã–µ, "+
						"—á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."+
						"–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥: \n"+
						"–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ``, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ "+
						"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ —Å–¥–µ–ª–∞–ª–∏. –í—Å–µ —Å–ª–æ–≤–∞ –æ—Ç–¥–µ–ª—è–π—Ç–µ –ø—Ä–æ–±–µ–ª–æ–º.\n"+
						"–ù–∞–ø—Ä–∏–º–µ—Ä, –í—ã —Å–¥–µ–ª–∞–ª–∏ –ø–æ–¥—Ö–æ–¥ –∏–∑ 10 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π. –ß—Ç–æ–±—ã —è –≤—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–∏—Å–∞–ª, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ "+
						"—á–∞—Ç: `@%s —Å–¥–µ–ª–∞–ª –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ 10`",
					botName,
					botName,
				),
			)
		default:
			sendMessage(bot, update, fmt.Sprintf("–ö–æ–º–∞–Ω–¥–∞ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", command))
		}

		db.Close()
	}
}

func createBot(token string) *tgbotapi.BotAPI {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	return bot
}

func checkIsText(command string) (string, bool) {
	var isText, err = regexp.MatchString(`^[–∞-—è–ê-–Ø—ë–Å]+$`, command)
	if err != nil {
		fmt.Println(err)
	}

	return command, isText
}

func checkIsInt(count string) (int, bool) {
	var isInt, err = regexp.MatchString(`^(\d+)$`, count)
	if err != nil {
		fmt.Println(err)
	}

	countInt, _ := strconv.Atoi(count)

	return countInt, isInt
}

func sendMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update, message string) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	msg.ParseMode = "markdown"
	msg.ReplyToMessageID = update.Message.MessageID

	bot.Send(msg)
}

func prepareInput(inputText string) []string {
	needle := regexp.MustCompile(`[[:punct:]]`)
	return strings.Split(needle.ReplaceAllString(strings.ToLower(inputText), ""), " ")
}

func checkBotCall(update tgbotapi.Update, firstWord string, botName string) bool {
	if update.Message.Entities == nil {
		return false
	}

	for _, Entity := range *update.Message.Entities {
		if Entity.Type != "mention" || firstWord != botName {
			return false
		}
	}

	return true
}

// –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–∑ —Å–ª–∞–π—Å–∞.
func deleteElemFromSlice(slice []string, index int) []string {
	return append(slice[:index], slice[index+1:]...)
}
